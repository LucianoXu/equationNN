
import numpy as np
import torch
from scenario import *
import tqdm
from gen import gen_example

from scenario import signature
from torch.utils.data import Dataset
from model import tok_encode, token2id
import multiprocessing




SOS_ID = token2id['<SOS>']
EOS_ID = token2id['<EOS>']

class ExampleDataset(Dataset):
    '''
    The supervised learning dataset obtained by reversing the path generated by gen_example.
    Will omit the examples exceeding the max_len.
    '''
    def __init__(self, 
                 number_of_examples: int, 
                 max_step: int,
                 max_height: int,
                 max_len: int = 256,
                 num_workers: int = 16):
        
        self.sig = signature
        self.number_of_examples = number_of_examples
        self.max_step = max_step
        self.max_height = max_height
        self.max_len = max_len
        self.num_workers = num_workers

        # Generate examples in parallel
        self.examples = self._generate_examples_in_parallel()

        # assertion to check if examples exceed max_len
        # for example in self.examples:
        #     if len(example[1]) > max_len:
        #         raise ValueError("Example exceeds max_len")


    def _generate_example_subset(self, num_examples) -> list[tuple[torch.Tensor, torch.Tensor]]:
        """
        Generates a subset of examples, to be run in a separate process.
        """
        examples_set = set()

        progress_bar = tqdm.tqdm(range(num_examples), desc="Generating Process")

        while len(examples_set) < num_examples:
            path = gen_example(self.max_step, self.max_height)

            for (term, opt, pos, _, given_subst) in path.path:

                # Synthesize and encode the prompt
                prompt = term.sig_str(self.sig) + " : " + RULE_NAMES[opt]+ " " + " ".join(str(p) for p in pos) + " " + given_subst.sig_str(self.sig)
                encoded_ids = tuple(tok_encode(prompt))

                input = (SOS_ID, ) + encoded_ids
                label = encoded_ids + (EOS_ID, )

                # Check the length
                if len(input) > self.max_len:
                    continue

                example = (prompt, input, label)
                examples_set.add(example)

                progress_bar.update(1)
        
        return list(examples_set)

    def _generate_examples_in_parallel(self) -> list[tuple[torch.Tensor, torch.Tensor]]:
        """
        Generates examples in parallel using multiprocessing.
        """
        num_examples_per_worker = self.number_of_examples // self.num_workers
        extra_examples = self.number_of_examples % self.num_workers

        with multiprocessing.Pool(processes=self.num_workers) as pool:
            # Create a progress bar for the total number of examples
            with tqdm.tqdm(total=self.num_workers, desc="Process Overview") as progress_bar:
                # Run the example generation across multiple processes
                results = []
                for i in range(self.num_workers):
                    # Give extra examples to some workers to meet exact count
                    worker_examples = num_examples_per_worker + (1 if i < extra_examples else 0)
                    result = pool.apply_async(self._generate_example_subset, args=(worker_examples,))
                    results.append(result)

                # Collect the results and update the progress bar
                examples_list = []
                for result in results:
                    examples_list.extend(result.get())
                    progress_bar.update(1)

        return examples_list


    def __len__(self):
        """
        Returns the size of the dataset.
        """
        return self.number_of_examples

    def __getitem__(self, idx):
        """
        Generates one example.
        """
        return self.examples[idx]
    

def get_collate_fn(device: str = 'cpu'):
    def collate_fn(batch):

        PAD_ID = token2id['<PAD>']

        # Find the longest sequence in the batch
        batch_max_len = max([len(x[1]) for x in batch])

        padded_inputs = []
        padded_labels = []
        loss_masks = []

        for text, input, label in batch:

            padded_input = list(input) + [PAD_ID] * (batch_max_len - len(input))
            padded_inputs.append(padded_input)

            padded_label = list(label) + [PAD_ID] * (batch_max_len - len(input))
            padded_labels.append(padded_label)
            
            loss_mask = [1] * len(input) + [0] * (batch_max_len - len(input))
            loss_masks.append(loss_mask)

        return torch.tensor(padded_inputs, device = device), torch.tensor(padded_labels, device = device), torch.tensor(loss_masks, device = device)
    
    return collate_fn

if __name__ == "__main__":
    dataset = ExampleDataset(20000, 8, 4)
    print(len(dataset))
    for i in range(20000):
        print(dataset[i][0])
        # if 'subst' in dataset[i][0]:
        #     input()
